DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_LIST $$
CREATE PROCEDURE APPR_USER_LIST (
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_LIST:
 BEGIN
	SELECT * FROM APVW_USER_ACT;
END
APPR_USER_LIST $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_LOGIN $$
CREATE PROCEDURE APPR_USER_LOGIN(
	IN pIN_USER_NAME VARCHAR(80),
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_LOGIN:
BEGIN
	SELECT * FROM APVW_USER_ACT
	WHERE USER_NAME = pIN_USER_NAME;
 
END
APPR_USER_LOGIN $$
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_DELETE $$
CREATE PROCEDURE APPR_USER_DELETE (
	IN pIN_APTB_USER_ID VARCHAR(32),
    IN pIN_ACTION_BY VARCHAR(32),
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_DELETE:
 BEGIN

    DECLARE V_SESSION_USER_ROLE INT DEFAULT (SELECT ROLE_LEVEL 
                                                FROM APVW_USER_ACT 
                                                WHERE UNHEX(APTB_USER_ID) = UNHEX(pIN_ACTION_BY)
                                            );


    DECLARE V_RECORD_USER_ROLE INT DEFAULT (SELECT ROLE_LEVEL 
                                                FROM APVW_USER_ACT 
                                                WHERE UNHEX(APTB_USER_ID) = UNHEX(pIN_APTB_USER_ID)
                                            );
    
    IF pIN_APTB_USER_ID = pIN_ACTION_BY THEN
    
    SET pOUT_ERROR_MSG = 'You cannot delete yourself';

    ELSEIF V_SESSION_USER_ROLE >= V_RECORD_USER_ROLE THEN
    
    SET pOUT_ERROR_MSG = 'Cannot delete an user higher than or equal to your role';
	
    ELSE
    
    DELETE
	FROM APTB_USER
	WHERE APTB_USER_ID = UNHEX(pIN_APTB_USER_ID);

    SET pOUT_ACTION_MSG = 'Successfully deleted user';    

    END IF;

END
APPR_USER_DELETE $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_ADD $$
CREATE PROCEDURE APPR_USER_ADD (
	IN pIN_APTB_USER_ID VARCHAR(32),
	IN pIN_USER_NAME varchar(80),
	IN pIN_USER_PASSWORD varchar(256),
	IN pIN_FULL_NAME varchar(256),
	IN pIN_MOBILE_NO varchar(80),
	IN pIN_EMAIL_ID varchar(256),
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	IN pIN_CREATED_BY VARCHAR(32),
    IN pIN_MICRO_MNGMT VARCHAR(1),
    IN pIN_FEEDBACK_REQ VARCHAR(1),
    
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_ADD:
 BEGIN

	INSERT INTO APTB_USER (
		APTB_USER_ID, 
		USER_NAME, 
		USER_PASSWORD, 
		FULL_NAME, 
		MOBILE_NO, 
		EMAIL_ID, 
		APTB_ROLE_ID, 
		ACT_STS,
        MICRO_MNGMT,
        FEEDBACK_REQ,
		CREATED_ON, 
		UPDATED_ON, 
		CREATED_BY, 
		UPDATED_BY
		)
	VALUES (
		UNHEX(pIN_APTB_USER_ID),
		pIN_USER_NAME,
		pIN_USER_PASSWORD,
		pIN_FULL_NAME,
		pIN_MOBILE_NO,
		pIN_EMAIL_ID,
		UNHEX(pIN_APTB_ROLE_ID),
		DEFAULT,
        pIN_MICRO_MNGMT,
        pIN_FEEDBACK_REQ,
		CURRENT_TIMESTAMP,
		NULL,
		UNHEX(pIN_CREATED_BY),
		NULL
		);
END
APPR_USER_ADD $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_UPDATE $$
CREATE PROCEDURE APPR_USER_UPDATE (
	IN pIN_APTB_USER_ID VARCHAR(32),
	IN pIN_USER_NAME varchar(80),
	IN pIN_USER_PASSWORD varchar(256),
	IN pIN_FULL_NAME varchar(256),
	IN pIN_MOBILE_NO varchar(80),
	IN pIN_EMAIL_ID varchar(256),
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	IN pIN_ACT_STS VARCHAR(1),
    IN pIN_MICRO_MNGMT VARCHAR(1),
    IN pIN_FEEDBACK_REQ VARCHAR(1),
    IN pIN_UPDATED_BY VARCHAR(32),
	
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_UPDATE:
 BEGIN

    DECLARE V_SESSION_USER_ROLE INT DEFAULT (SELECT ROLE_LEVEL 
                                                FROM APVW_USER_ACT 
                                                WHERE UNHEX(APTB_USER_ID) = UNHEX(pIN_UPDATED_BY)
                                            );


    DECLARE V_RECORD_USER_ROLE INT DEFAULT (SELECT ROLE_LEVEL 
                                                FROM APVW_USER_ACT 
                                                WHERE UNHEX(APTB_USER_ID) = UNHEX(pIN_APTB_USER_ID)
                                            );
    
    IF pIN_APTB_USER_ID = pIN_UPDATED_BY THEN
    
    SET pOUT_ERROR_MSG = 'You cannot edit yourself';

    ELSEIF V_SESSION_USER_ROLE >= V_RECORD_USER_ROLE THEN
    
    SET pOUT_ERROR_MSG = 'Cannot edit an user higher than or equal to your role';
	
    ELSE



            UPDATE APTB_USER SET
                
                USER_NAME	= 		pIN_USER_NAME,
                USER_PASSWORD	= 		pIN_USER_PASSWORD,
                FULL_NAME	= 		pIN_FULL_NAME,
                MOBILE_NO	= 		pIN_MOBILE_NO,
                EMAIL_ID	= 		pIN_EMAIL_ID,
                APTB_ROLE_ID	= 		UNHEX(pIN_APTB_ROLE_ID),
                ACT_STS	= 		pIN_ACT_STS,
                MICRO_MNGMT = pIN_MICRO_MNGMT,
                FEEDBACK_REQ = pIN_FEEDBACK_REQ,
                UPDATED_ON	= 		CURRENT_TIMESTAMP,
                UPDATED_BY	= 		UNHEX(pIN_UPDATED_BY)
            WHERE APTB_USER_ID	= 		UNHEX(pIN_APTB_USER_ID);

    END IF;

END
APPR_USER_UPDATE $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_USER_FIND_BY_ID $$
CREATE PROCEDURE APPR_USER_FIND_BY_ID (
	IN pIN_APTB_USER_ID VARCHAR(32),
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_USER_FIND_BY_ID:
 BEGIN
	SELECT * FROM APVW_USER_ACT
	WHERE UNHEX(APTB_USER_ID) = UNHEX(pIN_APTB_USER_ID);
END
APPR_USER_FIND_BY_ID $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_ROLE_LIST $$
CREATE PROCEDURE APPR_ROLE_LIST (
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_ROLE_LIST:
 BEGIN
	SELECT
		HEX(APTB_ROLE_ID) AS APTB_ROLE_ID,
		ROLE,
		DISPLAY_NAME,
		ACT_STS
	FROM APTB_ROLE;
END
APPR_ROLE_LIST $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_ROLE_DELETE $$
CREATE PROCEDURE APPR_ROLE_DELETE (
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_ROLE_DELETE:
 BEGIN
	DELETE
	FROM APTB_ROLE
	WHERE APTB_ROLE_ID = UNHEX(pIN_APTB_ROLE_ID);
END
APPR_ROLE_DELETE $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_ROLE_ADD $$
CREATE PROCEDURE APPR_ROLE_ADD (
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	IN pIN_ROLE varchar(80),
	IN pIN_DISPLAY_NAME varchar(80),
	IN pIN_ACT_STS VARCHAR(200),

	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_ROLE_ADD:
 BEGIN

	INSERT INTO APTB_ROLE (
		APTB_ROLE_ID, 
		ROLE, 
		DISPLAY_NAME, 
		ACT_STS 
		)
	VALUES (
		UNHEX(pIN_APTB_ROLE_ID),
		pINROLE,
		pINDISPLAY_NAME,
		pINACT_STS
		);
END
APPR_ROLE_ADD $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_ROLE_UPDATE $$
CREATE PROCEDURE APPR_ROLE_UPDATE (
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	IN pIN_ROLE varchar(80),
	IN pIN_DISPLAY_NAME varchar(80),
	IN pIN_ACT_STS VARCHAR(200),

	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_ROLE_UPDATE:
 BEGIN

	UPDATE APTB_ROLE SET
		APTB_ROLE_ID	= 		UNHEX(pIN_APTB_ROLE_ID),
		ROLE	= 		pINROLE,
		DISPLAY_NAME	= 		pINDISPLAY_NAME,
		ACT_STS	= 		pINACT_STS
		;
END
APPR_ROLE_UPDATE $$
DELIMITER ;


DELIMITER $$
DROP PROCEDURE IF EXISTS APPR_ROLE_FIND_BY_ID $$
CREATE PROCEDURE APPR_ROLE_FIND_BY_ID (
	IN pIN_APTB_ROLE_ID VARCHAR(32),
	OUT pOUT_ACTION_MSG VARCHAR(1000),
	OUT pOUT_ERROR_MSG VARCHAR(1000)
)
APPR_ROLE_FIND_BY_ID:
 BEGIN
	SELECT
		HEX(APTB_ROLE_ID) AS APTB_ROLE_ID,
		ROLE,
		DISPLAY_NAME,
		ACT_STS
	FROM APTB_ROLE
	WHERE APTB_ROLE_ID = UNHEX(pIN_APTB_ROLE_ID);
END
APPR_ROLE_FIND_BY_ID $$
DELIMITER ;
